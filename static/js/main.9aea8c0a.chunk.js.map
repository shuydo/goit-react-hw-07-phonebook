{"version":3,"sources":["redux/slices/items.js","redux/slices/filter.js","redux/store.js","Comps/ContactForm/ContactForm.js","Comps/ContactList/ContactList.js","Comps/Filter/Filter.js","App.js","index.js"],"names":["initialState","JSON","parse","localStorage","getItem","itemSlice","createSlice","name","reducers","addItem","state","action","setItem","stringify","payload","push","delItem","filter","item","id","actions","filterSlice","filterChange","_","rootReducer","items","store","configureStore","reducer","devTools","process","initState","number","ContactForm","useState","form","setForm","dispatch","useDispatch","inputHandler","e","target","value","onSubmit","preventDefault","nanoid","type","pattern","title","required","onChange","ContactList","dBase","contacts","toLowerCase","includes","getFilterContacts","useSelector","map","el","onClick","Filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEIA,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,aAC9CJ,IAAcA,EAAe,IAElC,IAAMK,EAAYC,YAAY,CAC5BC,KAAM,QACNP,eACAQ,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfR,aAAaS,QACX,WACAX,KAAKY,UAAL,sBAAmBH,GAAnB,CAA0BC,EAAOG,YAEnCJ,EAAMK,KAAKJ,EAAOG,UAGpBE,QAAS,SAACN,EAAOC,GAKf,OAJAR,aAAaS,QACX,WACAX,KAAKY,UAAUH,EAAMO,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOR,EAAOG,aAElDJ,EAAMO,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOR,EAAOG,eAK9C,EAA6BT,EAAUe,QAA/BX,EAAR,EAAQA,QAASO,EAAjB,EAAiBA,QACTX,IAAf,QC1BMgB,EAAcf,YAAY,CAC9BC,KAAM,SACNP,aAAc,GACdQ,SAAU,CAAEc,aAAc,SAACC,EAAGZ,GAAJ,OAAeA,EAAOG,YAGnCQ,EAAiBD,EAAYD,QAA7BE,aCJTE,EAAc,CAAEC,QAAOR,ODKdI,EAAf,SCEeK,EALDC,YAAe,CAC3BC,QAASJ,EACTK,UAAUC,I,6CCANC,EAAY,CAAExB,KAAM,GAAIyB,OAAQ,IAEvB,SAASC,IAGtB,MAAwBC,mBAASH,GAAjC,mBAAOI,EAAP,KAAaC,EAAb,KACMC,EAASC,cAGTC,EAAe,SAAAC,GAAC,OACpBJ,EAAQ,2BAAKD,GAAN,kBAAaK,EAAEC,OAAOlC,KAAOiC,EAAEC,OAAOC,UAU/C,OACE,uBAAMC,SATa,SAAAH,GACnBA,EAAEI,iBACFT,EAAKhB,GAAK0B,YAAO,GACjBR,EAAS5B,EAAQ0B,IACjBC,EAAQL,IAKR,UACE,sCACA,uBACEe,KAAK,OACLvC,KAAK,OACLwC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRP,MAAOP,EAAK5B,KACZ2C,SAAUX,IAGZ,wCACA,uBACEO,KAAK,MACLvC,KAAK,SACLwC,QAAQ,yFACRC,MAAM,6iBACNC,UAAQ,EACRP,MAAOP,EAAKH,OACZkB,SAAUX,IAEZ,uBACA,wBAAQO,KAAK,SAAb,4BCxCS,SAASK,IACtB,IAAMd,EAAWC,cAIXc,EAVkB,SAACC,EAAUpC,GAAX,OACxBoC,EAASpC,QAAO,qBAAGV,KACZ+C,cAAcC,SAAStC,EAAOqC,kBAQvBE,CAFAC,aAAY,SAAA/C,GAAK,OAAIA,EAAMe,SAC1BgC,aAAY,SAAA/C,GAAK,OAAIA,EAAMO,WAG1C,OACE,6BACGmC,EAAMM,KAAI,SAAAC,GAAE,OACX,6BACE,8BACE,iCACGA,EAAGpD,KADN,KACcoD,EAAG3B,OAAS,cAE1B,wBAAQc,KAAK,SAASc,QAAS,kBAAMvB,EAASrB,EAAQ2C,EAAGxC,MAAzD,wBALKwC,EAAGxC,SCfL,SAAS0C,IACtB,IAAMxB,EAAWC,cAEjB,OACE,qCACE,uDACA,uBAAOQ,KAAK,OAAQI,SAAU,SAAAV,GAAC,OAAIH,EAASf,EAAakB,EAAEC,OAAOC,cCTzD,SAASoB,IACtB,OACE,qCACE,2CACA,cAAC7B,EAAD,IAEA,0CACA,cAAC4B,EAAD,IACA,cAACV,EAAD,OCJNY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUvC,MAAOA,EAAjB,SACE,cAACoC,EAAD,QAGJI,SAASC,eAAe,W","file":"static/js/main.9aea8c0a.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nlet initialState = JSON.parse(localStorage.getItem(\"contacts\"));\r\nif (!initialState) initialState = [];\r\n\r\nconst itemSlice = createSlice({\r\n  name: \"items\",\r\n  initialState,\r\n  reducers: {\r\n    addItem: (state, action) => {\r\n      localStorage.setItem(\r\n        \"contacts\",\r\n        JSON.stringify([...state, action.payload])\r\n      );\r\n      state.push(action.payload); // [...state, action.payload]\r\n    },\r\n\r\n    delItem: (state, action) => {\r\n      localStorage.setItem(\r\n        \"contacts\",\r\n        JSON.stringify(state.filter(item => item.id !== action.payload))\r\n      );\r\n      return state.filter(item => item.id !== action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addItem, delItem } = itemSlice.actions;\r\nexport default itemSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst filterSlice = createSlice({\r\n  name: \"filter\",\r\n  initialState: \"\",\r\n  reducers: { filterChange: (_, action) => action.payload },\r\n});\r\n\r\nexport const { filterChange } = filterSlice.actions;\r\nexport default filterSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\"; // import { devToolsEnhancer } from \"redux-devtools-extension\"\r\nimport items from \"./slices/items\";\r\nimport filter from \"./slices/filter\";\r\n\r\nconst rootReducer = { items, filter } ;\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n});\r\n\r\nexport default store;\r\n","import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\n\n// import PropTypes from \"prop-types\";\nimport { /*connect ,*/ useDispatch } from \"react-redux\";\n// import contactsActions from \"../../redux/contacts-actions\";\nimport { addItem } from \"../../redux/slices/items\";\n\nconst initState = { name: \"\", number: \"\" };\n\nexport default function ContactForm() {\n  // const [name, setName] = useState();\n  // const [number, setNumber] = useState();\n  const [form, setForm] = useState(initState); \n  const dispatch=useDispatch()\n  // const handleChangeName = e => setName(e.target.value);\n  // const handleChangeNumber = e => setNumber(e.target.value);\n  const inputHandler = e =>\n    setForm({ ...form, [e.target.name]: e.target.value });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    form.id = nanoid(5); \n    dispatch(addItem(form));\n    setForm(initState); \n    // onSubmit({ name, number });    // setName(\"\");    // setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Name</h3>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={form.name}\n        onChange={inputHandler}\n      />\n\n      <h3>Number</h3>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        value={form.number}\n        onChange={inputHandler}\n      />\n      <br></br>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// const mapsDispatchToProps = dispatch => ({\n//   onSubmit: ({ name, number }) =>\n//     dispatch(contactsActions.addContact(name, number)),\n// });\n\n// export default connect(null, mapsDispatchToProps)(ContactForm);\n","// import PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\n// import contactsActions from \"../../redux/contacts-actions\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { delItem } from \"../../redux/slices/items\";\n\nconst getFilterContacts = (contacts, filter) =>\n  contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  const items = useSelector(state => state.items);\n  const filter = useSelector(state => state.filter);\n  const dBase = getFilterContacts(items, filter);\n\n  return (\n    <ol>\n      {dBase.map(el => (\n        <li key={el.id}>\n          <p>\n            <span>\n              {el.name}: {el.number + \"  \"}\n            </span>\n            <button type=\"button\" onClick={() => dispatch(delItem(el.id))}>\n              Delete\n            </button>\n          </p>\n        </li>\n      ))}\n    </ol>\n  );\n}\n\n// ContactList.propTypes = {\n//   dBase: PropTypes.arrayOf(PropTypes.object).isRequired,\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   dBase: getFilterContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","// import PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\n// import contactsActions from \"../../redux/contacts-actions\";\n\nimport { useDispatch } from \"react-redux\";\nimport { filterChange } from \"../../redux/slices/filter\";\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <input type=\"text\"  onChange={e => dispatch(filterChange(e.target.value))}></input>\n    </>\n  );\n}\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactForm from \"./Comps/ContactForm/ContactForm\";\nimport ContactList from \"./Comps/ContactList/ContactList\";\nimport Filter from \"./Comps/Filter/Filter\";\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}